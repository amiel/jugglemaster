README for using jmlib

This is a quick README describing the salient bits of using jmlib to
put together an application.

The simplest-to-understand application using jmlib is [at time of writing,
and likely to remain] aajm. Notably, the draw_juggler() function.


1) Co-ordinate System

jmlib considers (0,0) to be the top left of the screen. At the top of
its throw, any given ball has its /minimum/ Y-value.

The "left" things are on the left on-screen. Generally, consider watching
a standard jmlib setup to be like watching yourself juggle in a mirror.


2) Initialise

JMLib *jm = new JMLib();
jm->setWindowSize(width,height)


3) Set Patterns/Styles

jm->setPatternDefault();
jm->setStyleDefault();
jm->startJuggle();

Note that setPatternDefault and setStyleDefault are also called in the constructor,
so you don't need to call them explicitly on startup.

More generally:

jm->setPattern("Pattern Name", "Siteswap");
jm->setStyle("Style Name");
  Where style is one of: "Normal", "Reverse", "Shower", "Mills Mess",
  "Center", "Windmill", "Random"
jm->startJuggle();


4) Render

arm* ap = &(jm->ap);
ball* rhand = &(jm->rhand);
ball* lhand = &(jm->lhand);
hand* handp = &(jm->handpoly);


Head:
X and Y coordinates are for the center of the head.

drawcircle(ap->hx, ap->hy, ap->hr); // Head X, Y, Radius

Arms:
Arms are in 5 segments.

for (int i=0;i<5;i++) {
    drawline(ap->rx[i], ap->ry[i], ap->rx[i+1], ap->ry[i+1]);
    drawline(ap->lx[i], ap->ly[i], ap->lx[i+1], ap->ly[i+1]);
}

Hands:
Hands are in 10 segments.

for (int i=0; i < 10; i++) {
    drawline(rhand->gx + handp->rx[i],
        rhand->gy + handp->ry[i],
        rhand->gx + handp->rx[(i+1)%10],
        rhand->gy + handp->ry[(i+1)%10]);
    drawline(lhand->gx + handp->lx[i],
        lhand->gy + handp->ly[i],
        lhand->gx + handp->lx[(i+1)%10],
        lhand->gy + handp->ly[(i+1)%10]);
}

Balls:
X and Y coordinates are for the upper left "corner" of the ball (of an imaginary
box enclosing the ball), so depending of the drawcircle routine, you will have
to add the radius to the X and Y coordinates to get correct results.

int radius = jm->getBallRadius();
for(int i = jm->numBalls() -1; i >= 0; i--) {
	drawcircle(jm->b[i].gx + radius, jm->b[i].gy + radius, radius);
}



5) Loop

jm->doJuggle();

Obviously, there's more. This is intentionally the minimum required to
show a juggler on the screen.

6) Adding support for showing the siteswap on screen

Use the functions getSiteposStart and getSiteposStop to get the part of the
siteswap that is currently active. When you draw the siteswap on screen, this
part of the siteswap string should be drawn using a special color (or similar).

Pseudo-code follows:

void draw_chars(char* str, int length, int x, int y); // add plaftorm specific implementation
int string_pixel_width(char* str, int length); // add plaform specific implementation

int start = (int)jmlib->getSiteposStart(); 
int stop  = (int)jmlib->getSiteposStop();
int diff = stop - start;
char* site = jmlib->getSite();
int x = <calculate aproporiate position for centering string on screen>
int y = 0;

// First part of string
if (start > 0) draw_chars(site, start, x, y);

// Active part of string, should be drawn in different color
x += string_pixel_width(site, start);
site += start;
draw_chars(site, diff, x, y);

// Last part of string
x += string_pixel_width(site, diff);
site += diff;
draw_chars(site, strlen(site), x, y);

7) Misc tips

JMLib supports two different rendering modes that control how the juggler is
scaled to fit properly on screen.

Classic: This is the original mode. It doesn't work very well with small screens
         or resolutions that are very wide or tall. Also, when resizing the
         screen, the pattern will be re-calculated.
Dynamic: Scales better for most resolutions, especially small screens and tall and
         wide resolutions. When resizing the screen, the pattern will not be
         re-calculated.

For implementations where the user can change the window size, dynamic rendering
is usually the best choice. If the screen size is fixed (such as for PDA's) using
classic mode with special tweaks may yield the best results. Also, for low-end
systems with slow floating point, dynamic mode might give a noticable slowdown.

See jmdlx for an example of a port that uses dynamic scaling.
See jmpalm for an example of a port that uses classic scaling with special tweaks
to fit a fixed resulution.
         

Chunky Kibbles <chunky@icculus.org>
Per Johan Groland <jm@jugglemaster.net>
